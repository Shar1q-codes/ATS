name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: "false"
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-digest: ${{ steps.build-backend.outputs.digest }}
      frontend-digest: ${{ steps.build-frontend.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=staging

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_NODE_ENV=staging

  # Database Migration
  migrate-database:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run database migrations
        working-directory: ./backend
        run: npm run migration:run
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NODE_ENV: staging

      - name: Verify migration
        working-directory: ./backend
        run: npm run schema:verify
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NODE_ENV: staging

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [build-and-push, migrate-database]
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Add staging server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to staging server
        run: |
          # Copy deployment files to staging server
          scp -r production/ ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/ai-ats-deploy/
          scp docker-compose.prod.yml ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }}:/tmp/ai-ats-deploy/

          # Execute deployment on staging server
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            set -e
            
            # Navigate to deployment directory
            cd /tmp/ai-ats-deploy
            
            # Update environment variables
            cat > .env.staging << 'ENVEOF'
            # Staging Environment Variables
            NODE_ENV=staging
            
            # Database Configuration
            DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
            REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
            
            # JWT Configuration
            JWT_SECRET=${{ secrets.STAGING_JWT_SECRET }}
            JWT_EXPIRES_IN=7d
            
            # OpenAI Configuration
            OPENAI_API_KEY=${{ secrets.STAGING_OPENAI_API_KEY }}
            
            # Email Configuration
            POSTMARK_API_KEY=${{ secrets.STAGING_POSTMARK_API_KEY }}
            
            # Application Configuration
            PORT=3001
            CORS_ORIGIN=${{ secrets.STAGING_FRONTEND_URL }}
            
            # Frontend Configuration
            NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_SUPABASE_ANON_KEY }}
            NEXT_PUBLIC_NODE_ENV=staging
            
            # Monitoring
            SENTRY_DSN=${{ secrets.STAGING_SENTRY_DSN }}
            LOG_LEVEL=debug
            ENVEOF
            
            # Update docker-compose with new images
            sed -i 's|image: .*backend.*|image: ${{ needs.build-and-push.outputs.backend-image }}|g' docker-compose.prod.yml
            sed -i 's|image: .*frontend.*|image: ${{ needs.build-and-push.outputs.frontend-image }}|g' docker-compose.prod.yml
            
            # Deploy with blue-green strategy
            docker-compose -f docker-compose.prod.yml --env-file .env.staging pull
            docker-compose -f docker-compose.prod.yml --env-file .env.staging up -d --force-recreate
            
            # Wait for services to be healthy
            timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "Up (healthy)"; do sleep 5; done'
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Verify deployment
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Health check
          curl -f ${{ secrets.STAGING_API_URL }}/api/health
          curl -f ${{ secrets.STAGING_FRONTEND_URL }}/api/health

  # Smoke Tests
  smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright
        working-directory: ./frontend
        run: npx playwright install --with-deps

      - name: Run smoke tests
        working-directory: ./frontend
        run: npx playwright test --grep="@smoke"
        env:
          PLAYWRIGHT_BASE_URL: ${{ secrets.STAGING_FRONTEND_URL }}
          API_BASE_URL: ${{ secrets.STAGING_API_URL }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: smoke-test-results
          path: frontend/test-results/
          retention-days: 7

  # Performance Tests
  performance-tests:
    name: Run Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '1m', target: 5 },
              { duration: '3m', target: 5 },
              { duration: '1m', target: 0 },
            ],
            thresholds: {
              http_req_duration: ['p(95)<500'],
              http_req_failed: ['rate<0.1'],
            },
          };

          export default function () {
            // Test frontend
            let frontendResponse = http.get('${{ secrets.STAGING_FRONTEND_URL }}');
            check(frontendResponse, {
              'frontend status is 200': (r) => r.status === 200,
              'frontend response time < 2s': (r) => r.timings.duration < 2000,
            });

            // Test API health
            let apiResponse = http.get('${{ secrets.STAGING_API_URL }}/api/health');
            check(apiResponse, {
              'api status is 200': (r) => r.status === 200,
              'api response time < 500ms': (r) => r.timings.duration < 500,
            });

            sleep(1);
          }
          EOF

          k6 run load-test.js

  # Security Tests
  security-tests:
    name: Run Security Tests
    runs-on: ubuntu-latest
    needs: deploy-staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: ${{ secrets.STAGING_FRONTEND_URL }}
          rules_file_name: ".zap/rules.tsv"
          cmd_options: "-a"

      - name: Run API Security Test
        run: |
          # Basic API security checks
          curl -f -X GET ${{ secrets.STAGING_API_URL }}/api/health

          # Check for security headers
          curl -I ${{ secrets.STAGING_FRONTEND_URL }} | grep -i "x-frame-options\|x-content-type-options\|strict-transport-security"

  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-tests, security-tests]
    if: failure()

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_PRIVATE_KEY }}

      - name: Rollback deployment
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            set -e
            
            cd /tmp/ai-ats-deploy
            
            # Get previous image tags from backup
            if [ -f .env.staging.backup ]; then
              # Restore previous configuration
              mv .env.staging.backup .env.staging
              docker-compose -f docker-compose.prod.yml --env-file .env.staging up -d --force-recreate
              
              # Wait for rollback to complete
              timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "Up (healthy)"; do sleep 5; done'
              
              echo "Rollback completed successfully"
            else
              echo "No backup found for rollback"
              exit 1
            fi
          EOF

  # Notification
  notify:
    name: Notify Deployment Results
    runs-on: ubuntu-latest
    needs: [deploy-staging, smoke-tests, performance-tests, security-tests]
    if: always()

    steps:
      - name: Notify Slack on success
        if: ${{ needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#deployments"
          text: "🚀 Staging deployment successful for ${{ github.sha }}"
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.deploy-staging.result == 'failure' || needs.smoke-tests.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#deployments"
          text: "❌ Staging deployment failed for ${{ github.sha }}"
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'staging',
              description: 'Staging deployment',
              auto_merge: false
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' ? 'success' : 'failure' }}',
              environment_url: '${{ secrets.STAGING_FRONTEND_URL }}',
              description: 'Staging deployment ${{ needs.deploy-staging.result == 'success' && needs.smoke-tests.result == 'success' ? 'successful' : 'failed' }}'
            });
