name: Security Scanning

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Run npm audit
        working-directory: ./${{ matrix.directory }}
        run: |
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check if there are any vulnerabilities
          if [ $(jq '.metadata.vulnerabilities.total' audit-results.json) -gt 0 ]; then
            echo "Vulnerabilities found in ${{ matrix.directory }}:"
            jq '.advisories' audit-results.json
            
            # Fail if high or critical vulnerabilities
            HIGH_CRITICAL=$(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-results.json)
            if [ $HIGH_CRITICAL -gt 0 ]; then
              echo "High or critical vulnerabilities found!"
              exit 1
            fi
          fi

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=${{ matrix.directory }}/package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Container Image Scanning
  container-scan:
    name: Container Image Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.component }}
          file: ./${{ matrix.component }}/Dockerfile.prod
          push: false
          tags: ai-ats-${{ matrix.component }}:security-scan
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ai-ats-${{ matrix.component }}:security-scan
          format: "sarif"
          output: "trivy-${{ matrix.component }}.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-${{ matrix.component }}.sarif"

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        with:
          image: ai-ats-${{ matrix.component }}:security-scan
          fail-build: true
          severity-cutoff: high

  # SAST (Static Application Security Testing)
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Infrastructure as Code Scanning
  iac-scan:
    name: Infrastructure as Code Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: "docker"
          iac_version: "v1"
          policy_type: "all"
          only_warn: true
          sarif_upload: true

  # License Compliance
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        directory: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Install dependencies
        working-directory: ./${{ matrix.directory }}
        run: npm ci

      - name: Check licenses
        working-directory: ./${{ matrix.directory }}
        run: |
          license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;CC0-1.0;Unlicense' --excludePrivatePackages

      - name: Generate license report
        working-directory: ./${{ matrix.directory }}
        run: |
          license-checker --json > license-report-${{ matrix.directory }}.json

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: ${{ matrix.directory }}/license-report-${{ matrix.directory }}.json

  # Security Policy Compliance
  policy-compliance:
    name: Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "SECURITY.md file is missing"
            exit 1
          fi

      - name: Validate Docker security practices
        run: |
          # Check Dockerfiles for security best practices
          for dockerfile in */Dockerfile*; do
            if [ -f "$dockerfile" ]; then
              echo "Checking $dockerfile"
              
              # Check for non-root user
              if ! grep -q "USER " "$dockerfile"; then
                echo "Warning: $dockerfile does not specify a non-root user"
              fi
              
              # Check for HEALTHCHECK
              if ! grep -q "HEALTHCHECK" "$dockerfile"; then
                echo "Warning: $dockerfile does not include a health check"
              fi
              
              # Check for specific vulnerable base images
              if grep -q "FROM.*:latest" "$dockerfile"; then
                echo "Warning: $dockerfile uses 'latest' tag which is not recommended"
              fi
            fi
          done

      - name: Check environment variable security
        run: |
          # Check for hardcoded secrets in environment files
          find . -name "*.env*" -not -path "./node_modules/*" | while read -r file; do
            if [ -f "$file" ]; then
              echo "Checking $file for potential secrets"
              
              # Look for patterns that might be secrets
              if grep -E "(password|secret|key|token).*=" "$file" | grep -v "your_" | grep -v "example" | grep -v "placeholder"; then
                echo "Warning: Potential hardcoded secrets found in $file"
              fi
            fi
          done

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        container-scan,
        sast-scan,
        secret-scan,
        iac-scan,
        license-scan,
        policy-compliance,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate security summary
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report

          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}

          ## Scan Results

          | Scan Type | Status |
          |-----------|--------|
          | Dependency Scan | ${{ needs.dependency-scan.result }} |
          | Container Scan | ${{ needs.container-scan.result }} |
          | SAST Scan | ${{ needs.sast-scan.result }} |
          | Secret Scan | ${{ needs.secret-scan.result }} |
          | IaC Scan | ${{ needs.iac-scan.result }} |
          | License Scan | ${{ needs.license-scan.result }} |
          | Policy Compliance | ${{ needs.policy-compliance.result }} |

          ## Recommendations

          - Review any failed scans and address identified issues
          - Keep dependencies up to date
          - Follow security best practices for Docker containers
          - Regularly rotate secrets and API keys
          - Monitor for new vulnerabilities in dependencies

          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Notify Security Team
  notify-security:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs:
      [
        dependency-scan,
        container-scan,
        sast-scan,
        secret-scan,
        iac-scan,
        license-scan,
        policy-compliance,
      ]
    if: failure()

    steps:
      - name: Notify security team on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#security"
          text: "🚨 Security scan failed for ${{ github.repository }}"
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Failure - ' + new Date().toISOString().split('T')[0],
              body: `Security scans have failed for commit ${context.sha}.\n\nPlease review the workflow results and address any security issues found.\n\n**Workflow:** ${context.workflow}\n**Run ID:** ${context.runId}`,
              labels: ['security', 'high-priority']
            });
