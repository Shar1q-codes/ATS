name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:
    inputs:
      update_type:
        description: "Type of update to perform"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - all

jobs:
  # Check for outdated dependencies
  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest

    outputs:
      backend-outdated: ${{ steps.check-backend.outputs.outdated }}
      frontend-outdated: ${{ steps.check-frontend.outputs.outdated }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Check backend outdated dependencies
        id: check-backend
        working-directory: ./backend
        run: |
          npm ci
          OUTDATED=$(npm outdated --json || echo '{}')
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT

          if [ "$OUTDATED" != "{}" ]; then
            echo "Backend has outdated dependencies"
            npm outdated
          fi

      - name: Check frontend outdated dependencies
        id: check-frontend
        working-directory: ./frontend
        run: |
          npm ci
          OUTDATED=$(npm outdated --json || echo '{}')
          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT

          if [ "$OUTDATED" != "{}" ]; then
            echo "Frontend has outdated dependencies"
            npm outdated
          fi

  # Update patch versions
  update-patch:
    name: Update Patch Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: ${{ inputs.update_type == 'patch' || inputs.update_type == 'all' || github.event_name == 'schedule' }}

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update patch dependencies
        working-directory: ./${{ matrix.component }}
        run: |
          # Install npm-check-updates
          npm install -g npm-check-updates

          # Update patch versions only
          ncu -u --target patch

          # Install updated dependencies
          npm install

          # Run tests to ensure nothing is broken
          npm test || true

      - name: Check for changes
        id: changes
        working-directory: ./${{ matrix.component }}
        run: |
          if git diff --quiet package.json package-lock.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(${{ matrix.component }}): update patch dependencies"
          title: "chore(${{ matrix.component }}): update patch dependencies"
          body: |
            ## Dependency Updates - Patch Level

            This PR updates patch-level dependencies for the ${{ matrix.component }} component.

            ### Changes
            - Updated patch-level dependencies to latest versions
            - All tests should continue to pass

            ### Testing
            - [ ] Automated tests pass
            - [ ] Manual testing completed
            - [ ] No breaking changes expected

            **Auto-generated by GitHub Actions**
          branch: dependency-updates/${{ matrix.component }}-patch
          delete-branch: true
          labels: |
            dependencies
            patch
            ${{ matrix.component }}

  # Update minor versions
  update-minor:
    name: Update Minor Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: ${{ inputs.update_type == 'minor' || inputs.update_type == 'all' }}

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Update minor dependencies
        working-directory: ./${{ matrix.component }}
        run: |
          npm install -g npm-check-updates

          # Update minor versions
          ncu -u --target minor

          npm install
          npm test || true

      - name: Check for changes
        id: changes
        working-directory: ./${{ matrix.component }}
        run: |
          if git diff --quiet package.json package-lock.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(${{ matrix.component }}): update minor dependencies"
          title: "chore(${{ matrix.component }}): update minor dependencies"
          body: |
            ## Dependency Updates - Minor Level

            This PR updates minor-level dependencies for the ${{ matrix.component }} component.

            ### Changes
            - Updated minor-level dependencies to latest versions
            - May include new features and improvements

            ### Testing Required
            - [ ] Automated tests pass
            - [ ] Manual testing completed
            - [ ] Review changelog for breaking changes
            - [ ] Update documentation if needed

            **Auto-generated by GitHub Actions**
          branch: dependency-updates/${{ matrix.component }}-minor
          delete-branch: true
          labels: |
            dependencies
            minor
            ${{ matrix.component }}
            needs-review

  # Update major versions (manual review required)
  update-major:
    name: Update Major Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: ${{ inputs.update_type == 'major' || inputs.update_type == 'all' }}

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Analyze major updates
        working-directory: ./${{ matrix.component }}
        run: |
          npm install -g npm-check-updates

          # Show what would be updated
          ncu --target major > major-updates.txt

          # Create a report of major updates
          cat > major-update-report.md << 'EOF'
          # Major Dependency Updates Available

          The following major version updates are available:

          ```
          EOF
          cat major-updates.txt >> major-update-report.md
          echo '```' >> major-update-report.md

          echo "" >> major-update-report.md
          echo "## Review Required" >> major-update-report.md
          echo "Major version updates may contain breaking changes." >> major-update-report.md
          echo "Please review the changelog for each dependency before updating." >> major-update-report.md

      - name: Create Issue for Major Updates
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('${{ matrix.component }}/major-update-report.md', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Major Dependency Updates Available - ${{ matrix.component }}',
              body: report,
              labels: ['dependencies', 'major', '${{ matrix.component }}', 'needs-review']
            });

  # Security updates
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest

    strategy:
      matrix:
        component: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        working-directory: ./${{ matrix.component }}
        run: npm ci

      - name: Run security audit
        working-directory: ./${{ matrix.component }}
        run: |
          # Run audit and capture output
          npm audit --json > audit-results.json || true

          # Check if there are fixable vulnerabilities
          FIXABLE=$(jq '.metadata.vulnerabilities.total' audit-results.json)

          if [ "$FIXABLE" -gt 0 ]; then
            echo "Found $FIXABLE vulnerabilities, attempting to fix..."
            
            # Try to fix vulnerabilities
            npm audit fix --force
            
            # Run audit again to see what's left
            npm audit --json > audit-results-after.json || true
            
            echo "Security updates applied"
          else
            echo "No fixable vulnerabilities found"
          fi

      - name: Check for changes
        id: changes
        working-directory: ./${{ matrix.component }}
        run: |
          if git diff --quiet package.json package-lock.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for Security Updates
        if: steps.changes.outputs.changed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "security(${{ matrix.component }}): fix security vulnerabilities"
          title: "🔒 security(${{ matrix.component }}): fix security vulnerabilities"
          body: |
            ## Security Updates

            This PR fixes security vulnerabilities found in ${{ matrix.component }} dependencies.

            ### Changes
            - Applied `npm audit fix` to resolve security issues
            - Updated vulnerable dependencies to secure versions

            ### Priority
            This is a security update and should be reviewed and merged promptly.

            ### Testing
            - [ ] Automated tests pass
            - [ ] Security scan passes
            - [ ] Manual testing completed

            **Auto-generated by GitHub Actions**
          branch: security-updates/${{ matrix.component }}
          delete-branch: true
          labels: |
            security
            dependencies
            high-priority
            ${{ matrix.component }}

  # Docker base image updates
  docker-updates:
    name: Check Docker Base Image Updates
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for base image updates
        run: |
          # Check Node.js base image updates
          CURRENT_NODE=$(grep "FROM node:" */Dockerfile* | head -1 | sed 's/.*node:\([^-]*\).*/\1/')
          LATEST_NODE=$(curl -s https://registry.hub.docker.com/v2/repositories/library/node/tags/ | jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+-alpine$")) | .name' | sort -V | tail -1 | sed 's/-alpine//')

          echo "Current Node.js version: $CURRENT_NODE"
          echo "Latest Node.js version: $LATEST_NODE"

          if [ "$CURRENT_NODE" != "$LATEST_NODE" ]; then
            echo "Node.js base image update available: $CURRENT_NODE -> $LATEST_NODE"
            
            # Create issue for manual review
            cat > docker-update-issue.md << EOF
          # Docker Base Image Update Available

          A new version of the Node.js base image is available:

          - **Current:** node:$CURRENT_NODE-alpine
          - **Latest:** node:$LATEST_NODE-alpine

          ## Action Required

          Please review and update the Dockerfile base images:
          - \`backend/Dockerfile\`
          - \`backend/Dockerfile.prod\`
          - \`frontend/Dockerfile\`
          - \`frontend/Dockerfile.prod\`

          ## Testing

          After updating, ensure:
          - [ ] All builds complete successfully
          - [ ] All tests pass
          - [ ] No breaking changes in Node.js version
          - [ ] Security scans pass
          EOF
            
            echo "docker-update-available=true" >> $GITHUB_ENV
          else
            echo "docker-update-available=false" >> $GITHUB_ENV
          fi

      - name: Create Docker Update Issue
        if: env.docker-update-available == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const issue = fs.readFileSync('docker-update-issue.md', 'utf8');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Docker Base Image Update Available',
              body: issue,
              labels: ['dependencies', 'docker', 'needs-review']
            });

  # Generate dependency report
  dependency-report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs:
      [
        check-outdated,
        update-patch,
        update-minor,
        update-major,
        security-updates,
        docker-updates,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Generate dependency report
        run: |
          cat > dependency-report.md << 'EOF'
          # Dependency Update Report

          **Date:** $(date)
          **Trigger:** ${{ github.event_name }}

          ## Update Results

          | Component | Patch Updates | Minor Updates | Major Updates | Security Updates |
          |-----------|---------------|---------------|---------------|------------------|
          | Backend | ${{ needs.update-patch.result }} | ${{ needs.update-minor.result }} | ${{ needs.update-major.result }} | ${{ needs.security-updates.result }} |
          | Frontend | ${{ needs.update-patch.result }} | ${{ needs.update-minor.result }} | ${{ needs.update-major.result }} | ${{ needs.security-updates.result }} |

          ## Actions Taken

          - Patch updates: Automatically created PRs for safe updates
          - Minor updates: Created PRs requiring review
          - Major updates: Created issues for manual review
          - Security updates: Created high-priority PRs
          - Docker updates: Checked base image versions

          ## Next Steps

          1. Review and merge patch update PRs
          2. Test and merge minor update PRs
          3. Plan major updates based on created issues
          4. Prioritize security update PRs

          EOF

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.md

  # Notify team
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs:
      [
        check-outdated,
        update-patch,
        update-minor,
        update-major,
        security-updates,
        docker-updates,
      ]
    if: always()

    steps:
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: "#dependencies"
          text: "Dependency update workflow completed"
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
